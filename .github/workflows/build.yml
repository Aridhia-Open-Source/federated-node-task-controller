name: Build Docker Image
run-name: Building image
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'README'
      - 'LICENSE'
      - 'DEPLOYMENT'
      - 'Makefile'
      - '.gitignore'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'README'
      - 'LICENSE'
      - 'DEPLOYMENT'
      - 'Makefile'
      - '.gitignore'

permissions:
  contents: write

env:
  TAG: ''
  OWNER_LC: ''
  HELM_CHANNEL: stable
  IS_TAG: ${{ github.ref_type == 'tag' }}
  DEV_BUILD: ${{ github.ref_type != 'tag' && github.ref != 'refs/heads/main' }}

jobs:
  linters:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for vulnerabilities
        run: |
          docker run --entrypoint /bin/sh \
            -v ./Pipfile:/app/Pipfile \
            -v ./Pipfile.lock:/app/Pipfile.lock \
            -v ./scripts/tests/vulnerabilities.sh:/vulnerabilities.sh \
            python:3.12.2-alpine \
            /vulnerabilities.sh

      - name: Run pylint
        run: |
          make pylint_ci

      - name: Run hadolint
        run: |
          make hadolint
  tests:
    needs: linters
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Python Tests
        run: |
          make tests_ci

      - uses: irongut/CodeCoverageSummary@v1.3.0
        name: Code Coverage Summary Report
        with:
          filename: artifacts/coverage.xml
          fail_below_min: true
          thresholds: '60 80'
  update:
    needs: tests
    runs-on: ubuntu-latest
    outputs:
      is_tag: ${{ steps.vars.outputs.IS_TAG }}
      dev_build: ${{ steps.vars.outputs.DEV_BUILD }}
      chart_version: ${{ steps.vars.outputs.CHART_VERSION }}
      tag: ${{ steps.vars.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setting global values
        id: vars
        run: |
          echo "IS_TAG=${{ env.IS_TAG }}" >> ${GITHUB_OUTPUT}
          echo "DEV_BUILD=${{ env.DEV_BUILD }}" >> ${GITHUB_OUTPUT}

          echo "Setting version according to the Chart.yaml"
          cd k8s/fn-task-controller

          version=$(grep 'version:.*' Chart.yaml | sed 's/^.*: //')
          echo "Chart version: ${version}"
          appVersion=$(grep 'appVersion:.*' Chart.yaml | sed 's/^.*: \"//'| sed 's/\"//')
          echo "Chart appVersion: ${appVersion}"


          if [[ "${{ env.DEV_BUILD }}" == "false" ]]; then
            echo "CHART_VERSION=${version}" >> ${GITHUB_OUTPUT}
            echo "TAG=${appVersion}" >> ${GITHUB_OUTPUT}
          else
            echo "CHART_VERSION=${version}-${GITHUB_SHA::6}" >> ${GITHUB_OUTPUT}
            echo "TAG=${appVersion}-${GITHUB_SHA::6}" >> ${GITHUB_OUTPUT}
          fi


  build:
    needs: update
    uses: Aridhia-Open-Source/pipelines/.github/workflows/build-docker.yml@main
    with:
      TAG: ${{ needs.update.outputs.tag }}
      IMAGE: fn_task_controller
      BUILD_PATH: .
      HASH_SUFFIX: false
      DOCKER_ACR: ${{ vars.DOCKER_ACR }}
    secrets:
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  helm:
    uses: Aridhia-Open-Source/pipelines/.github/workflows/helm-build.yml@main
    needs:
      - build
      - update
    with:
      VERSION: ${{ needs.update.outputs.chart_version }}
      HELM_REPO: ${{ vars.HELM_REPO }}
      USER_HELM: ${{ vars.USER_HELM }}
      PATH_BUILD: k8s/fn-task-controller
      CHART_NAME: fn-task-controller
    secrets:
      HELM_TOKEN: ${{ secrets.HELM_TOKEN }}
